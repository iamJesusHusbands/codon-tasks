services:
  # Collector service: receives telemetry from the app
  otel-collector:
      image: otel/opentelemetry-collector:latest
      command: ["--config=/etc/otel-collector-config.yaml"] # use config file
      volumes:
        - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
      ports:
        - "4318:4318"   # OTLP/HTTP ingest
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-agent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentpw}
      POSTGRES_DB: ${POSTGRES_DB:-agentdb}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # Enable simple persistence so your keys survive restarts
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redisdata:/data

  # Jaeger service: stores traces and provides a web UI to view them
  # Jaeger "all-in-one" gives tracing + OTLP receivers out of the box
  jaeger:
    image: jaegertracing/all-in-one:1.57
    environment:
      COLLECTOR_OTLP_ENABLED: "true" # let Jaeger accept OTLP input
    # restart: unless-stopped
    ports:
      - "16686:16686"   # Jaeger UI
    # - "4317:4317"     # OTLP gRPC
    # - "4318:4318"     # OTLP HTTP

  prometheus:
    image: prom/prometheus:v2.53.0
    restart: unless-stopped
    # Mount your Prometheus config from the repo
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  # (Optional) Grafana for dashboards I think I am still researching this..
  # grafana:
  #   image: grafana/grafana:11.0.0
  #   restart: unless-stopped
  #   environment:
  #     GF_SECURITY_ADMIN_USER: admin
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus

volumes:
  pgdata:
  redisdata: