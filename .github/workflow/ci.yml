name: CI (lint + tests)

on:
  pull_request:          
  push:
    branches: [main]     

permissions:
  contents: read

jobs:
  # 1) Lint job (single Python)
  lint:
    name: Lint (ruff / black / mypy)
    runs-on: ubuntu-latest
    timeout-minutes: 15   # avoid hanging forever

    steps:
      # 1. Check out the repository code
      - name: Checkout
        uses: actions/checkout@v5

      # 2. Install Python 3.12
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"  # turn on pip caching
          # Files dependencies for cache keys:
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      # 3. Install project + dev dependencies (linters, pytest, etc.)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      # 4. Lint with Ruff (fast linter)
      - name: Ruff (lint)
        run: ruff check .

      # 5. Check code formatting with Black (but don't auto-fix in CI)
      - name: Black (format check)
        run: black --check .

      # 6. Type checking with Mypy
      - name: Mypy (type check - soft)
        run: mypy app tests || true

  # 2) Test job (matrix)
  test:
    name: Unit tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      # fail-fast: false means "keep running other matrix versions even if one fails"
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    # Service containers that run next to the job.
    services:
      postgres:
        image: postgres:16-alpine
        ports: ["5432:5432"]  # publish container 5432 -> runner 5432
        env:
          POSTGRES_USER: agent
          POSTGRES_PASSWORD: agentpw
          POSTGRES_DB: agentdb
        # Healthcheck so GitHub waits for DB readiness
        options: >-
          --health-cmd="pg_isready -U agent -d agentdb"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]  # publish container 6379 -> runner 6379
        # Basic healthcheck to wait for Redis to be ready
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    # Env vars your tests/app use in CI (point to the services above)
    env:
      DATABASE_URL: postgresql+psycopg://agent:agentpw@localhost:5432/agentdb
      REDIS_URL: redis://localhost:6379/0

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      # Wait for Postgres TCP to accept connections
      - name: Wait for Postgres socket
        run: |
          python - <<'PY'
          import time, socket
          host, port = "localhost", 5432
          for i in range(60):
              try:
                  with socket.create_connection((host, port), timeout=1):
                      break
              except OSError:
                  time.sleep(1)
          else:
              raise SystemExit("Postgres not reachable on 5432")
          PY

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings \
                 --cov=app --cov-report=term-missing:skip-covered --cov-report=xml

      # Save coverage.xml as an artifact so others can download it
      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

      # Logs for if tests fail
      - name: Dump Postgres logs on failure
        if: failure()
        run: docker logs postgres || true
      - name: Dump Redis logs on failure
        if: failure()
        run: docker logs redis || true
